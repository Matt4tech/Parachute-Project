//Master Device
#include <Wire.h>//I2c
#include <SPI.h>//SPI
#include <SoftwareSerial.h>//Serial
#include <SD.h>//SD card
#include <TinyGPS++.h>//GPS
//#include <SFE_BMP180.h>//Beromic pressure
#include "MPU9250.h"//MPU board

//##Input DATA:#########
String fileName = "INPUTHERE.txt";
int PreloadedData1;
int PreloadedData2;
//######################
//Other/////////
int topMotor;//value to top stepper motor
int bottomMotor;//value to bottom stepper motor

//GPS//////////////
SoftwareSerial gpsSerial(8,9);//digital pins
TinyGPSPlus gps;//GPS object
float latitude,longitude;
boolean gpsUpdated =false;
///////////////////

//BMP180///////////
//SFE_BMP180 pressure;
//Starting altitude
#define ALTITUDE 412.0//change before Launch
float altitudeNum = 0.0;
///////////////////

//MPU//////////////
MPU9250 IMU(Wire,0x68);//Creates MPU9250 at address of 0x68
int status;
boolean mpuUpdated;
float mpuDataArray[10];
///////////////////

//SD Card//////////
//CS_PIN = 10
File file;
float savingDataArray[13];
//{altitude,ax,ay,az,gx,gy,gz,hx,hy,hz,temperature,latitude,longitude}
///////////////////

void setup() {
  Wire.begin();//Sets up as master of I2C bus
  gpsSerial.begin(9600);//Starts GPS serial  
//  if (!(pressure.begin())){//wont run until BMP connection is secured
//    while(1);
//  }  
  status =IMU.begin();//wont run until MPU connection is secured
  if(status < 0){
    while(1) {}
  }
  //Initializes SD card and creates file
  //initializeSD();
  //createFile(fileName);
}

void loop() {
  
  //GPS
  if(canGetGPSData()){
    latitude = getLat();
    longitude = getLong();
    gpsUpdated = true;
  }else{
    gpsUpdated = false;
  }

  //MPU
  getMPUDataArray();

  mpuUpdated = false;//end of loop
  gpsUpdated = false;
  if(mpuUpdated && gpsUpdated){
    //afirmDataArray()
  }
  
  sendSaveDataToSlave();
  deUpdateData();
}

void getMPUDataArray(){//gets data from MPU board and uploads into an array
  //Saving Data
  IMU.readSensor();
  //Accelerometer: 
  mpuDataArray[0] = IMU.getAccelX_mss();
  mpuDataArray[1] = IMU.getAccelY_mss();
  mpuDataArray[2] = IMU.getAccelZ_mss();
  //Gyroscope:
  mpuDataArray[3] = IMU.getGyroX_rads();
  mpuDataArray[4] = IMU.getGyroY_rads();
  mpuDataArray[5] = IMU.getGyroZ_rads();
  //Magnetometer:
  mpuDataArray[6] = IMU.getMagX_uT();
  mpuDataArray[7] = IMU.getMagY_uT();
  mpuDataArray[8] = IMU.getMagZ_uT();
  //temperature:
  mpuDataArray[9] = IMU.getTemperature_C();
  //Format: {ax,ay,az,gx,gy,gz,hx,hy,hz,temperature};
  mpuUpdated = true;
}


float getLat(){//get Lattitude
  latitude = (gps.location.lat());
  return latitude;
}

float getLong(){//get Longitude
  longitude = (gps.location.lng());
  return longitude;
}

boolean canGetGPSData(){//checks if data from GPS sensor is avalible
  if(gpsSerial.available() && gps.encode(gpsSerial.read())){
    return true;
  }else{
    return false;
  }
}

void sendSaveDataToSlave(){//send data that needs to be saved to the slave device.
  afirmDataArray();//updates everything into single array
  Wire.beginTransmission(0);
  for(int x=0;x<13;x++){//delays becuase loop
    Wire.write((byte)savingDataArray[x]);
  }
  Wire.write((byte)topMotor);
  Wire.write((byte)bottomMotor);
  Wire.write(true/*boolean*/);
  Wire.endTransmission();
}

void afirmDataArray(){//sets up data array with all updated elements to be used for sending to the SD card
  getMPUDataArray();
  savingDataArray[0] = altitudeNum;//altitude
  savingDataArray[1] = mpuDataArray[0];//Ax
  savingDataArray[2] = mpuDataArray[1];//Ay
  savingDataArray[3] = mpuDataArray[2];//Az
  savingDataArray[4] = mpuDataArray[3];//Gx
  savingDataArray[5] = mpuDataArray[4];//Gy
  savingDataArray[6] = mpuDataArray[5];//Gz
  savingDataArray[7] = mpuDataArray[6];//Mx
  savingDataArray[8] = mpuDataArray[7];//My
  savingDataArray[9] = mpuDataArray[8];//Mz
  savingDataArray[10] = mpuDataArray[9];//Tempature
  savingDataArray[11] = latitude;//latitude
  savingDataArray[12] = longitude;//longitude
  //{altitude,ax,ay,az,gx,gy,gz,hx,hy,hz,temperature,latitude,longitude}
}

boolean deUpdateData(){//sets the status of all sensors as not updated
  mpuUpdated = false;
  gpsUpdated = false;
}
